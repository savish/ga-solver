FLAGS = -Wall
TARGET = main
CHROMOSOME = Chromosome
GENE = Gene
PARENTUNIT = ParentUnit
POPULATION = Population
GAUTILITY = GAUtility
EQUATION = Equation
EXPRESSION = Expression
EXPRESSIONFACTORY = ExpressionFactory
EXPRESSIONTYPE = ExpressionType.h
OPERATORFACTORY = OperatorFactory
OPERATOR = Operator
VARIABLE = Variable
CONSTANT = Constant.h
STACK = Stack
QUEUE = Queue
NODE = Node.h

P2OBJECTS = $(CHROMOSOME).o $(GENE).o $(PARENTUNIT).o $(POPULATION).o $(GAUTILITY).o
P1OBJECTS = $(OPERATORFACTORY).o $(EQUATION).o $(EXPRESSION).o $(EXPRESSIONFACTORY).o $(OPERATOR).o $(VARIABLE).o $(STACK).o $(QUEUE).o
OBJECTS = $(TARGET).o $(P1OBJECTS) $(P2OBJECTS)

CC = g++

all: $(OBJECTS)
	$(CC) $(FLAGS) $(OBJECTS) -o $(TARGET)
	
$(TARGET).o: $(TARGET).cpp $(POPULATION).h $(PARENTUNIT).h $(CHROMOSOME).h $(GENE).h $(GAUTILITY).h
	$(CC) -c $(TARGET).cpp
	
$(POPULATION).o : $(POPULATION).cpp $(POPULATION).h $(PARENTUNIT).h $(CHROMOSOME).h $(GENE).h
	$(CC) -c $(POPULATION).cpp
	
$(PARENTUNIT).o: $(PARENTUNIT).cpp $(PARENTUNIT).h $(CHROMOSOME).h $(GENE).h
	$(CC) -c $(PARENTUNIT).cpp

$(CHROMOSOME).o: $(CHROMOSOME).cpp $(CHROMOSOME).h $(GENE).h $(GAUTILITY).h
	$(CC) -c $(CHROMOSOME).cpp

$(GENE).o: $(GENE).cpp $(GENE).h
	$(CC) -c $(GENE).cpp

$(EQUATION).o: $(EQUATION).cpp $(EQUATION).h $(EXPRESSIONFACTORY).h $(OPERATORFACTORY).h $(EXPRESSION).h $(GAUTILITY).h $(OPERATOR).h $(VARIABLE).h $(STACK).h $(QUEUE).h $(EXPRESSIONTYPE) $(CONSTANT)
	$(CC) -c $(EQUATION).cpp

$(EXPRESSIONFACTORY).o: $(EXPRESSIONFACTORY).cpp $(EXPRESSIONFACTORY).h $(OPERATORFACTORY).h $(EXPRESSION).h $(GAUTILITY).h $(OPERATOR).h $(VARIABLE).h $(EXPRESSIONTYPE) $(CONSTANT)
	$(CC) -c $(EXPRESSIONFACTORY).cpp
	
$(OPERATOR).o: $(OPERATOR).cpp $(OPERATOR).h $(EXPRESSION).h $(GAUTILITY).h $(EXPRESSIONTYPE)
	$(CC) -c $(OPERATOR).cpp

$(VARIABLE).o: $(VARIABLE).cpp $(VARIABLE).h $(EXPRESSION).h $(GAUTILITY).h $(EXPRESSIONTYPE)
	$(CC) -c $(VARIABLE).cpp
	
$(EXPRESSION).o: $(EXPRESSION).cpp $(EXPRESSION).h $(GAUTILITY).h $(EXPRESSIONTYPE)
	$(CC) -c $(EXPRESSION).cpp
	
$(OPERATORFACTORY).o: $(OPERATORFACTORY).cpp $(OPERATORFACTORY).h
	$(CC) -c $(OPERATORFACTORY).cpp

$(STACK).o: $(STACK).cpp $(STACK).h $(NODE)
	$(CC) -c $(STACK).cpp
	
$(QUEUE).o: $(QUEUE).cpp $(QUEUE).h $(NODE)
	$(CC) -c $(QUEUE).cpp
	
$(GAUTLILTY).o: $(GAUTLILTY).cpp $(GAUTILITY).h
	$(CC) -c $(GAUTLILTY).cpp
	
run: 
	$(TARGET)
	
clean:
	rm -f *.o *~ $(TARGET)
